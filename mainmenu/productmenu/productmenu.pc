#define _CRT_SECURE_NO_WARNINGS

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <conio.h>

/* for oracle */
#include <sqlda.h>
#include <sqlca.h>
#include <sqlcpr.h>

EXEC SQL BEGIN DECLARE SECTION;
VARCHAR uid[80];
VARCHAR pwd[20];
EXEC SQL END DECLARE SECTION;

// win32 Visual C 2010 이상컴파일시 추가
#define getch() _getch()
//-----------------------------------------

/*---------------  화면 커서 위치 제어 ----------------------*/
#include < windows.h >
void gotoxy(int x, int y);
void getxy(int *x, int *y);
void clrscr(void);
/*-----------------------------------------------------------*/
void print_screen(char fname[]);
void DB_connect();
void Get_tuple();

void sql_error();

void productmenu_main()
{
    _putenv("NLS_LANG=American_America.KO16KSC5601"); //한글사용
    Get_tuple();
    EXEC SQL COMMIT WORK RELEASE;
    getch();
}

#define PAGE_NUM 5
void Get_tuple()
{
    // 호스트 변수 선언 (오라클과 값을 주고 받을 때)
    EXEC SQL BEGIN DECLARE SECTION;
    varchar v_name[50];
    int v_price;
    int v_id; // product id

    char dynstmt[1000];
    EXEC SQL END DECLARE SECTION;

    char name[20];
    int price;
    int id;

    int x, y, count = 0, i;

    /* Register sql_error() as the error handler. */
    EXEC SQL WHENEVER SQLERROR DO sql_error("\7ORACLE ERROR:\n");

    /* 사용자 입력 */
    clrscr();
    print_screen("screen/product_menu_screen.txt");

    /* 실행시킬 SQL 문장*/
    sprintf(dynstmt, "SELECT id, name, price FROM products");

    /* select 문장이 제대로 구성되어 있는지 화면에 찍어봄 */
    // printf("dynstmt:%s\n", dynstmt);

    // 쿼리문 실행
    EXEC SQL PREPARE S FROM : dynstmt;

    /* cursor 선언 */
    EXEC SQL DECLARE c_cursor CURSOR FOR S;

    /* cursor open */
    EXEC SQL OPEN c_cursor;

    // 찾은 데이터가 없으면 break
    EXEC SQL WHENEVER NOT FOUND DO break;

    x = 16;
    y = 14;

    // 전부 조회해서 출력
    for (;;)
    {
        EXEC SQL FETCH c_cursor INTO : v_id, : v_name, : v_price;

        v_name.arr[v_name.len] = '\0';

        gotoxy(x, y);

        printf(" [ %4d  ]        | %20s   |     |   $%8d   |", v_id, v_name.arr, v_price);
        y = y + 2;
        count++;

        // 하나씩 출력하다가 페이지 수랑 같아지면 멈춤 (입력 기다림)
        if (count == PAGE_NUM)
        {

            count = 0;
            char input;
            /**
             * a 또는 x가 가능한 입력 (가능한 입력이 아니면 아무 동작 하지 않음)
             * 이렇게하면 한 화면에서 여러 입력을 처리할 수 있음
             */
            while ((input = getch()) != 'a' && input != 'x');

            // 입력으로 a가 들어온 경우
            if (input == 'a')
            {
                gotoxy(16, 14); //이전 화면 부분 클리어
                for (i = 0; i < PAGE_NUM * 2; i++)
                {                    
                    printf("                                                                                    \n");
                }
                

                y = 14;
            }
            // 입력으로 x가 들어온 경우
            else if (input == 'x')
            {
                exit(1);
            }
        }
    }    
    gotoxy(x, 22);
    printf("                              (END)\n");

    /* Close the cursor. */
    EXEC SQL CLOSE c_cursor;

    EXEC SQL COMMIT;
}